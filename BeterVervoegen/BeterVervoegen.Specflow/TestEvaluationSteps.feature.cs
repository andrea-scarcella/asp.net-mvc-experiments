// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18052
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BeterVervoegen.Specflow
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("TestEvaluation")]
    public partial class TestEvaluationFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TestEvaluationSteps.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "TestEvaluation", "In order to improve my knowledge of verbs\r\nAs a language learner\r\nI want to be to" +
                    "ld how many verbs i have conjugated correctly", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("evaluate the answer to a question")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void EvaluateTheAnswerToAQuestion()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("evaluate the answer to a question", new string[] {
                        "mytag"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("the infinitive is \'zijn\', the simple past is \'was\' and the past participle is \'ge" +
                    "weest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("I have entered \'was\' as simple past", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.And("I have entered \'geweest\' as past participle", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.When("the question is evaluated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 12
 testRunner.Then("the result should be \'OK\' on the screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("evaluate a test")]
        public virtual void EvaluateATest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("evaluate a test", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "ItemID",
                        "Infinitive",
                        "SimplePast",
                        "PastParticiple"});
            table1.AddRow(new string[] {
                        "1",
                        "zijn",
                        "was",
                        "geweest"});
            table1.AddRow(new string[] {
                        "2",
                        "lopen",
                        "liep",
                        "gelopen"});
            table1.AddRow(new string[] {
                        "3",
                        "eten",
                        "at",
                        "gegeten"});
#line 15
 testRunner.Given("there is a test with the following test items", ((string)(null)), table1, "Given ");
#line 20
 testRunner.And("I have chosen \'was\' as simple past for item \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
 testRunner.And("I have chosen \'geweest\' as past participle for item \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
 testRunner.And("I have chosen \'liep\' as simple past for item \'2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
 testRunner.And("I have chosen \'gelopen\' as past participle for item \'2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
 testRunner.And("I have chosen \'at\' as simple past for item \'3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
 testRunner.And("I have chosen \'gegeten\' as past participle for item \'3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
 testRunner.When("the test is evaluated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
 testRunner.Then("the test result should be \'OK\' on the screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("evaluate a test with mistakes")]
        public virtual void EvaluateATestWithMistakes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("evaluate a test with mistakes", ((string[])(null)));
#line 32
  this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "ItemID",
                        "Infinitive",
                        "SimplePast",
                        "PastParticiple"});
            table2.AddRow(new string[] {
                        "1",
                        "zijn",
                        "was",
                        "geweest"});
            table2.AddRow(new string[] {
                        "2",
                        "lopen",
                        "liep",
                        "gelopen"});
            table2.AddRow(new string[] {
                        "3",
                        "eten",
                        "at",
                        "gegeten"});
#line 33
 testRunner.Given("there is a test with the following test items", ((string)(null)), table2, "Given ");
#line 38
 testRunner.And("I have chosen \'xxx\' as simple past for item \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
 testRunner.And("I have chosen \'yyy\' as past participle for item \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
 testRunner.And("I have chosen \'liep\' as simple past for item \'2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
 testRunner.And("I have chosen \'gelopen\' as past participle for item \'2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
 testRunner.And("I have chosen \'zzz\' as simple past for item \'3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
 testRunner.And("I have chosen \'gegeten\' as past participle for item \'3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
 testRunner.When("the test is evaluated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 47
 testRunner.Then("the test result should be \'KO\' on the screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("evaluate a test with mistakes and compute its score")]
        public virtual void EvaluateATestWithMistakesAndComputeItsScore()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("evaluate a test with mistakes and compute its score", ((string[])(null)));
#line 51
  this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "ItemID",
                        "Infinitive",
                        "SimplePast",
                        "PastParticiple"});
            table3.AddRow(new string[] {
                        "1",
                        "zijn",
                        "was",
                        "geweest"});
            table3.AddRow(new string[] {
                        "2",
                        "lopen",
                        "liep",
                        "gelopen"});
            table3.AddRow(new string[] {
                        "3",
                        "eten",
                        "at",
                        "gegeten"});
#line 52
 testRunner.Given("there is a test with the following test items", ((string)(null)), table3, "Given ");
#line 57
 testRunner.And("I have chosen \'xxx\' as simple past for item \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 58
 testRunner.And("I have chosen \'yyy\' as past participle for item \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
 testRunner.And("I have chosen \'liep\' as simple past for item \'2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
 testRunner.And("I have chosen \'gelopen\' as past participle for item \'2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
 testRunner.And("I have chosen \'at\' as simple past for item \'3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 64
 testRunner.And("I have chosen \'gegeten\' as past participle for item \'3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
 testRunner.When("the test is evaluated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 66
 testRunner.Then("the test result should be \'KO\' on the screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 67
 testRunner.And("the test score should be \'66\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
